const e='_internal.previousSecondaryCharacters',t=['莉瑟尔·冯·阿尔卡德 (血族公主)','艾露薇娅·瑟兰迪尔 (精灵公主)','理子 (机械生命，前文明独立作战单元)','露克希娅 (天使，高阶司书)','青璇 (龙裔，青龙，古老盟约的孤独守护者)','橘奈绪 (百兽裔，猫又亚种，斥候与猎手)','琥珀 (百兽裔，九尾狐亚种，情报贩子)'];function n(e){return e.trim().split(' (')[0].trim().split('·')[0].trim()}function o(e){const n=e.trim();if(t.includes(n))return!0;for(const e of t){if(e.split(' (')[0].trim()===n.split(' (')[0].trim())return!0}for(const e of t){if(e.split(' (')[0].trim().split('·')[0].trim()===n)return!0}return!1}function r(e){const t=_.get(e,'全局信息',{});return{时间:_.get(t,'时间',''),地点:_.get(t,'当前位置',''),日期:_.get(t,'日期','')}}function a(e){if(!_.has(e,'次要角色'))return;const t=_.get(e,'次要角色');if(!_.isObject(t)||Array.isArray(t))return;const n=[];for(const e in t)o(e)||n.push(e);if(n.length>0){console.log(`[次要角色限制] 检测到不允许的角色，正在移除: ${n.join(', ')}`);for(const t of n)_.unset(e,`次要角色.${t}`)}}function s(e,t){_.has(e,'次要角色记录')||_.set(e,'次要角色记录',{});const o=r(e),a=n(t),s=`次要角色记录.${a}`,i=`次要角色.${t}`,l=_.get(e,s);if(l&&'object'==typeof l){console.log(`[次要角色管理] ${t} (记录名: ${a}) 重新出场，恢复记录信息`);const n=_.get(l,'信任值',.01);_.has(e,`${i}.信任值`)&&(_.set(e,`${i}.信任值`,n),console.log(`[次要角色管理] 恢复 ${t} 的信任值: ${n}`));const r=_.get(l,'离场时持有的物品',{}),c=_.get(e,`${i}.持有物品`,{});if(Object.keys(r).length>0){const n={...r,...c};_.set(e,`${i}.持有物品`,n),console.log(`[次要角色管理] 恢复 ${t} 的物品，合并${Object.keys(r).length}件之前的物品`)}_.set(e,`${s}.出场次数`,_.get(l,'出场次数',0)+1),_.set(e,`${s}.出场地点`,o.地点),_.set(e,`${s}.出场时间`,`${o.日期} ${o.时间}`),_.set(e,`${s}.离场地点`,'待定'),_.set(e,`${s}.离场时间`,'N/A')}else{console.log(`[次要角色管理] ${t} (记录名: ${a}) 首次出场，创建新记录`);const n={出场次数:1,出场地点:o.地点,出场时间:`${o.日期} ${o.时间}`,离场地点:'待定',离场时间:'N/A',信任值:_.get(e,`${i}.信任值`,.01),离场时持有的物品:{}};_.set(e,s,n)}console.log(`[次要角色管理] ${t} 出场记录已更新`)}function i(e,t,o){_.has(e,'次要角色记录')||_.set(e,'次要角色记录',{});const a=r(e),s=n(t),i=`次要角色记录.${s}`;if(console.log(`[次要角色管理] ${t} (记录名: ${s}) 离场，保存当前状态`),!_.has(e,i)){const t={出场次数:1,出场地点:'',出场时间:'',离场地点:'待定',离场时间:'N/A',信任值:.01,离场时持有的物品:{}};_.set(e,i,t)}_.set(e,`${i}.离场地点`,a.地点),_.set(e,`${i}.离场时间`,`${a.日期} ${a.时间}`);const l=_.get(o,'信任值',.01);_.set(e,`${i}.信任值`,l);const c=_.get(o,'持有物品',{});_.set(e,`${i}.离场时持有的物品`,c),console.log(`[次要角色管理] ${t} 离场状态已保存 - 信任值: ${l}, 物品数量: ${Object.keys(c).length}`)}function l(e){if(!_.has(e,'plot_record.剧情节点记录'))return;const t=_.get(e,'plot_record.剧情节点记录');if(Array.isArray(t)){const n=t.length,o=function(e){if(!Array.isArray(e))return e;const t=new Set,n=[];for(const o of e)if('string'==typeof o){const e=o.trim();e&&!t.has(e)&&(t.add(e),n.push(o))}else n.push(o);return n}(t);o.length!==n&&(_.set(e,'plot_record.剧情节点记录',o),console.log(`[剧情节点去重] 已去除 ${n-o.length} 个重复记录，当前记录数: ${o.length}`))}}const c={'主要角色.白.关注度':{minChange:-.014,maxChange:.026},'主要角色.澪.好感度':{minChange:-.05,maxChange:.08},'主要角色.澪.治愈进度':{minChange:-5,maxChange:Number.POSITIVE_INFINITY},pattern_信任值:{minChange:-.15,maxChange:.2},pattern_好感度:{minChange:-.05,maxChange:.08},pattern_依赖度:{minChange:-.05,maxChange:.08},pattern_认可度:{minChange:-.05,maxChange:.08},pattern_污秽侵蚀度:{minChange:-.05,maxChange:.1},pattern_模因侵蚀率:{minChange:-.3,maxChange:.05}};function u(e,t,n=!1){return o=>{let r=Number(o);isNaN(r)&&(console.warn(`[数值变化限制] 无法将值转换为数字：${o}`),r=e);let a=Math.max(e,Math.min(t,r));return a=n?Math.round(a):function(e){return parseFloat(e.toFixed(5))}(a),a}}const p={'主要角色.白.关注度':u(0,1),'主要角色.澪.好感度':u(-1,1),'主要角色.澪.治愈进度':u(0,90,!0),pattern_信任值:u(-1,1),pattern_好感度:u(-1,1),pattern_依赖度:u(-1,1),pattern_认可度:u(-1,1),pattern_污秽侵蚀度:u(0,1),pattern_模因侵蚀率:u(0,1)};function f(e){if(null===e)return'null';if(void 0===e)return'undefined';const t=typeof e;if('object'===t){if(Array.isArray(e)){const t=function(e){if(0===e.length)return'empty';const t=new Set;for(const n of e)t.add(f(n));const n=Array.from(t).sort((e,t)=>e.localeCompare(t));return 1===n.length?n[0]:`mixed(${n.join('|')})`}(e);return`array[${e.length}]<${t}>`}return'object'}return'number'===t?Number.isInteger(e)?'integer':'float':'string'===t||'boolean'===t?t:'unknown'}function d(e,t,n){if(null==t)return;const o=function(e,t){const n=f(e),o=f(t);if(n===o)return{compatible:!0,oldType:n,newType:o};const r=['integer','float'];if(r.includes(n)&&r.includes(o))return{compatible:!0,oldType:n,newType:o};if(n.startsWith('array[')&&o.startsWith('array[')){const e=RegExp(/^array\[(\d+)\]<(.+)>$/).exec(n),t=RegExp(/^array\[(\d+)\]<(.+)>$/).exec(o);if(e&&t){const[,r,a]=e,[,s,i]=t;return'empty'===a?{compatible:!0,oldType:n,newType:o}:Math.abs(parseInt(s)-parseInt(r))>10?{compatible:!1,oldType:n,newType:o,reason:`数组长度变化过大 (${r} -> ${s})`}:a!==i?'empty'===i?{compatible:!0,oldType:n,newType:o}:i.startsWith('mixed(')?{compatible:!1,oldType:n,newType:o,reason:'数组内容从单一类型变为混合类型'}:{compatible:!1,oldType:n,newType:o,reason:`数组内容类型从 ${a} 变为 ${i}`}:{compatible:!0,oldType:n,newType:o}}}if(('null'===n||'undefined'===n)&&'null'!==o&&'undefined'!==o)return{compatible:!0,oldType:n,newType:o};if('null'!==n&&'undefined'!==n&&('null'===o||'undefined'===o))return{compatible:!0,oldType:n,newType:o};if('string'===n&&r.includes(o))return{compatible:!1,oldType:n,newType:o,reason:'字符串类型不应直接变为数值类型'};if(r.includes(n)&&'string'===o)return{compatible:!1,oldType:n,newType:o,reason:'数值类型不应直接变为字符串类型'};const a=['string','boolean','integer','float'],s=['object'];return a.includes(n)&&(s.includes(o)||o.startsWith('array['))?{compatible:!1,oldType:n,newType:o,reason:`基础类型 ${n} 不应变为复杂类型 ${o}`}:(s.includes(n)||n.startsWith('array['))&&a.includes(o)?{compatible:!1,oldType:n,newType:o,reason:`复杂类型 ${n} 不应变为基础类型 ${o}`}:'boolean'===n&&'boolean'!==o?{compatible:!1,oldType:n,newType:o,reason:'布尔值不应变为其他类型'}:'boolean'!==n&&'boolean'===o?{compatible:!1,oldType:n,newType:o,reason:'其他类型不应变为布尔值'}:{compatible:!1,oldType:n,newType:o,reason:`类型从 ${n} 变为 ${o} 可能存在问题`}}(t,n);if(!o.compatible){const r=function(e,t,n,o){const{oldType:r,newType:a,reason:s}=o;let i='变量类型不匹配警告\n';return i+=`路径: ${e}\n`,i+=`旧值: ${JSON.stringify(t)} (${r})\n`,i+=`新值: ${JSON.stringify(n)} (${a})\n`,s&&(i+=`原因: ${s}\n`),i+='\n建议: 请检查该变量的更新文本，或考虑重 roll 此消息',i}(e,t,n,o);'undefined'!=typeof toastr?toastr.warning(r,'类型不匹配警告',{timeOut:1e4,extendedTimeOut:5e3,closeButton:!0,progressBar:!0,positionClass:'toast-top-center'}):console.warn(`[类型检查警告] ${r}`),console.warn(`[类型不匹配] ${e}: ${o.oldType} -> ${o.newType}`,{oldValue:t,newValue:n,reason:o.reason})}}function g(e,t,n=null){const o=function(e){if(p[e])return p[e];if(e.includes('次要角色')&&e.endsWith('.信任值'))return p.pattern_信任值;if(e.includes('特殊角色')){if(e.endsWith('.好感度'))return p.pattern_好感度;if(e.endsWith('.依赖度'))return p.pattern_依赖度;if(e.endsWith('.认可度'))return p.pattern_认可度;if(e.endsWith('.污秽侵蚀度'))return p.pattern_污秽侵蚀度;if(e.endsWith('.模因侵蚀率'))return p.pattern_模因侵蚀率}return null}(t),r=function(e){if(c[e])return c[e];if(e.includes('次要角色')&&e.endsWith('.信任值'))return c.pattern_信任值;if(e.includes('特殊角色')){if(e.endsWith('.好感度'))return c.pattern_好感度;if(e.endsWith('.依赖度'))return c.pattern_依赖度;if(e.endsWith('.认可度'))return c.pattern_认可度;if(e.endsWith('.污秽侵蚀度'))return c.pattern_污秽侵蚀度;if(e.endsWith('.模因侵蚀率'))return c.pattern_模因侵蚀率}return null}(t);if(!o)return e;try{let a=o(e);if(r&&null!==n&&'number'==typeof n&&(a=function(e,t,n,o){const r=e-t;if(n.maxChange===Number.POSITIVE_INFINITY){if(r<0&&r<n.minChange){const e=t+n.minChange;return console.log(`变化幅度限制: ${o} 负向变化 ${r.toFixed(5)} 限制为 ${n.minChange}`),e}return e}if(r>n.maxChange){const e=t+n.maxChange;return console.log(`变化幅度限制: ${o} 正向变化 ${r.toFixed(5)} 限制为 ${n.maxChange}`),e}if(r<n.minChange){const e=t+n.minChange;return console.log(`变化幅度限制: ${o} 负向变化 ${r.toFixed(5)} 限制为 ${n.minChange}`),e}return e}(a,n,r,t),a=o(a)),a!==e){const n='number'!=typeof e?'类型转换':'范围限制';console.log(`数值修复: ${t} 从 ${e} ${n}为 ${a}`)}return a}catch(n){return console.error(`数值验证失败: ${t} = ${e}`,n instanceof Error?n.message:String(n)),e}}const h='var-change-worldbook-scan';const m=[];function y(t){if(console.log('Variable update started'),t?.stat_data){a(t.stat_data);const n=_.get(t.stat_data,'次要角色');_.set(t.stat_data,e,_.cloneDeep(n))}}function b(e,t,n,o){console.log(`Variable updated: ${t} from ${n} to ${o}`),d(t,n,o),m.push({stat_data:e,path:t,oldValue:n,newValue:o}),function(e,t){'次要角色'===t&&a(e)}(e,t),function(e,t,n,o){'plot_record.剧情进度'===t&&(console.log(`剧情进度从 "${n}" 变更为 "${o}"`),_.has(e,'plot_record.剧情节点记录')&&(_.set(e,'plot_record.剧情节点记录',[]),console.log('已清空剧情节点记录'))),'plot_record.剧情节点记录'===t&&l(e)}(e,t,n,o),function(e,t,n){'主要角色.澪.注入星尘稳定剂'===t&&1===n&&(console.log('澪.注入星尘稳定剂 的值变为 1，设置治愈进度为 90'),_.has(e,'主要角色.澪.治愈进度')&&(_.set(e,'主要角色.澪.治愈进度',90),console.log('澪的治愈进度已设置为 90'))),'主要角色.澪.治愈进度'===t&&1===_.get(e,'主要角色.澪.注入星尘稳定剂')&&(console.log('澪已注入星尘稳定剂，治愈进度不得修改，恢复为 90'),_.set(e,'主要角色.澪.治愈进度',90))}(e,t,o)}function T(t){if(console.log('Variable update ended'),m.length>0){console.log(`[延迟验证] 处理 ${m.length} 个待验证的变量更新`);for(const e of m){const{stat_data:t,path:n,oldValue:o,newValue:r}=e,a=_.get(t,n),s=g(a,n,o);s!==a&&(_.set(t,n,s),console.log(`[延迟验证] 数值已修复: ${n} = ${s}`))}m.length=0}if(t?.stat_data){a(t.stat_data),l(t.stat_data);const n=_.get(t.stat_data,'次要角色'),o=_.get(t.stat_data,e);o&&n&&function(e,t,n){if(!t||!n)return;const o=Object.keys(t),r=Object.keys(n),a=r.filter(e=>!o.includes(e));for(const t of a)s(e,t);const l=o.filter(e=>!r.includes(e));for(const n of l)i(e,n,t[n])}(t.stat_data,o,n),_.set(t.stat_data,e,_.cloneDeep(n)),function(e){const t=[],n=_.get(e,'全局信息.当前位置','');n&&'string'==typeof n&&t.push(n.trim());const o=_.get(e,'次要角色',{});if(_.isObject(o)&&!Array.isArray(o))for(const e of Object.keys(o))e&&'string'==typeof e&&t.push(e.trim());const r=[...new Set(t)].filter(e=>e.length>0);if(r.length>0){uninjectPrompts([h]);const e=r.join(', ');try{injectPrompts([{id:h,position:'none',depth:0,role:'user',content:e,should_scan:!0}]),console.log(`[世界书扫描] 注入扫描文本: ${e}`)}catch(e){console.warn('[世界书扫描] 注入扫描文本失败:',e instanceof Error?e.message:String(e))}}else uninjectPrompts([h])}(t.stat_data)}}$(()=>{eventOn('mag_variable_update_started',y),eventOn('mag_variable_updated',b),eventOn('mag_variable_update_ended',T),console.log('MVU变量处理脚本已加载')});