{"version":3,"file":"index.js","mappings":"AAAA,MAAM,EAA+BA,ECO/BC,EAAqB,EAAAD,EAAEE,KAAK,CAAC,SAAU,UAEvCC,EAA2B,EAAAH,EAAEI,OAAO,CAEtCC,cAAe,EAAAL,EAAEM,SAEjBC,uBAAwB,EAAAP,EAAEQ,MAAM,EAAAR,EAAEM,UAElCG,cAAe,EAAAT,EAAEM,WAGfI,EAAoB,EAAAV,EAAEI,OAAO,CAC/B,KAAMH,EAAmBU,aAGvBC,EAAqBT,EAAyBU,MAAM,CACtDR,cAAe,OACfE,uBAAwB,CAAC,4BAA6B,2BACtDE,cAAe,kBAMnB,SAASK,IACL,IACI,MAAMC,EAAiBC,EAAEC,IAAIC,YAAYC,kBAAmB,eAAgB,CAAC,GACvEC,EAAcV,EAAkBW,UAAUN,GAChD,OAAKK,EAAYE,QAIVF,EAAYG,KAAK,UAHpBC,QAAQC,IAAI,2BAA4B,EAAAzB,EAAE0B,cAAcN,EAAYO,OAI5E,CACA,MAAOA,GAEH,YADAH,QAAQC,IAAI,6BAA8BE,EAE9C,CACJ,CAIAC,eAAeC,IACX,IAEI,MAAMC,EAAehB,IACrB,IAAKgB,EAED,YADAN,QAAQC,IAAI,oCAGhBD,QAAQC,IAAI,6BAA6BK,KAEzC,MAAMC,QAAkBC,aAAapB,EAAmBP,eACxD,IAAK0B,GAAkC,IAArBA,EAAUE,OAGxB,OAFAT,QAAQC,IAAI,qBAAqBb,EAAmBP,8BACpD6B,OAAOC,QAAQ,QAAQvB,EAAmBP,sBAI9C,IAAI+B,EACAC,EAEJ,OAAQP,GACJ,IAAK,SACDM,EAAkBxB,EAAmBL,uBACrC8B,EAAmB,CAACzB,EAAmBH,eACvC,MACJ,IAAK,QACD2B,EAAkB,CAACxB,EAAmBH,eACtC4B,EAAmBzB,EAAmBL,uBACtC,MACJ,QAGI,OAGRiB,QAAQC,IAAI,wBAAyB,CACjCW,kBACAC,qBAGJ,MAAMC,EAAmBP,EAAUQ,IAAIC,GAC/BJ,EAAgBK,SAASD,EAAME,OAC/BlB,QAAQC,IAAI,sBAAsBe,EAAME,QACjC,IAAKF,EAAOG,SAAS,IAEvBN,EAAiBI,SAASD,EAAME,OACrClB,QAAQC,IAAI,sBAAsBe,EAAME,QACjC,IAAKF,EAAOG,SAAS,IAEzBH,SAGLI,iBAAiBhC,EAAmBP,cAAeiC,EAAkB,CAAEO,OAAQ,cACrFrB,QAAQC,IAAI,4BACZS,OAAOZ,QAAQ,iBAAiBQ,aACpC,CACA,MAAOH,GACHH,QAAQC,IAAI,4BAA6BE,GACzCO,OAAOP,MAAM,YACjB,CACJ,CAuBAmB,EAAE,KACEtB,QAAQC,IAAI,mCAEZI,IACKkB,KAAK,KACNvB,QAAQC,IAAI,6BAvBpB,WACI,IAAIuB,EAAmBlC,IAEvBmC,YAAYrB,UACR,MAAMsB,EAAsBpC,IACxBoC,GAAuBA,IAAwBF,IAC/CxB,QAAQC,IAAI,gCAAgCuB,QAAuBE,KACnEF,EAAmBE,QAEbrB,MAEX,KACHL,QAAQC,IAAI,uBAChB,CAYQ0B,GACA3B,QAAQC,IAAI,iCAEX2B,MAAMzB,IACPH,QAAQC,IAAI,qBAAsBE,GAClCO,OAAOP,MAAM,wBAOrBmB,EAAEO,QAAQC,GAAG,WAAY,KACrB9B,QAAQC,IAAI","sources":["src://tavern_helper_template/external var \"z\"","src://tavern_helper_template/src/var_update_method/index.ts"],"sourcesContent":["const __WEBPACK_NAMESPACE_OBJECT__ = z;","\"use strict\";\n/**\n * MVU 更新方式切换脚本\n *\n * 功能：根据 MVU 设置中的更新方式，动态切换世界书条目的启用状态\n */\n/** MVU 更新方式枚举 */\nconst UpdateMethodSchema = z.enum(['额外模型解析', '随AI输出']);\n/** 配置 Schema */\nconst UpdateMethodConfigSchema = z.object({\n    /** 世界书名称 */\n    worldbookName: z.string(),\n    /** 额外模型解析时启用的条目名称列表 */\n    extraModelParseEntries: z.array(z.string()),\n    /** 随AI输出时启用的条目名称 */\n    aiOutputEntry: z.string(),\n});\n/** MVU 设置 Schema */\nconst MvuSettingsSchema = z.object({\n    更新方式: UpdateMethodSchema.optional(),\n});\n// 配置\nconst updateMethodConfig = UpdateMethodConfigSchema.parse({\n    worldbookName: '终焉之诗',\n    extraModelParseEntries: ['[mvu_update]output_format', '[mvu_plot]output_format'],\n    aiOutputEntry: 'output_format',\n});\n// 工具函数\n/**\n * 获取当前 MVU 更新方式\n */\nfunction getMvuUpdateMethod() {\n    try {\n        const rawMvuSettings = _.get(SillyTavern.extensionSettings, 'mvu_settings', {});\n        const parseResult = MvuSettingsSchema.safeParse(rawMvuSettings);\n        if (!parseResult.success) {\n            console.log('[MVU 更新方式切换] MVU 设置格式错误:', z.prettifyError(parseResult.error));\n            return undefined;\n        }\n        return parseResult.data.更新方式;\n    }\n    catch (error) {\n        console.log('[MVU 更新方式切换] 获取 MVU 更新方式失败', error);\n        return undefined;\n    }\n}\n/**\n * 根据更新方式切换世界书条目开关\n */\nasync function switchWorldbookEntriesByUpdateMethod() {\n    try {\n        // 获取当前更新方式\n        const updateMethod = getMvuUpdateMethod();\n        if (!updateMethod) {\n            console.log('[MVU 更新方式切换] 未找到 MVU 更新方式设置，跳过处理');\n            return;\n        }\n        console.log(`[MVU 更新方式切换] 当前 MVU 更新方式: ${updateMethod}`);\n        // 获取世界书\n        const worldbook = await getWorldbook(updateMethodConfig.worldbookName);\n        if (!worldbook || worldbook.length === 0) {\n            console.log(`[MVU 更新方式切换] 世界书 \"${updateMethodConfig.worldbookName}\" 不存在或为空`);\n            toastr.warning(`世界书 \"${updateMethodConfig.worldbookName}\" 不存在`);\n            return;\n        }\n        // 根据更新方式确定启用/禁用的条目\n        let entriesToEnable;\n        let entriesToDisable;\n        // 使用 switch 替代 if-else，更符合类型安全\n        switch (updateMethod) {\n            case '额外模型解析':\n                entriesToEnable = updateMethodConfig.extraModelParseEntries;\n                entriesToDisable = [updateMethodConfig.aiOutputEntry];\n                break;\n            case '随AI输出':\n                entriesToEnable = [updateMethodConfig.aiOutputEntry];\n                entriesToDisable = updateMethodConfig.extraModelParseEntries;\n                break;\n            default: {\n                // @ts-expect-error TypeScript 会确保这里不可达（因为 updateMethod 只能是两个值之一）\n                const _exhaustiveCheck = updateMethod;\n                return;\n            }\n        }\n        console.log('[MVU 更新方式切换] 准备更新条目状态', {\n            entriesToEnable,\n            entriesToDisable,\n        });\n        // 更新世界书条目\n        const updatedWorldbook = worldbook.map(entry => {\n            if (entriesToEnable.includes(entry.name)) {\n                console.log(`[MVU 更新方式切换] 启用条目: ${entry.name}`);\n                return { ...entry, enabled: true };\n            }\n            else if (entriesToDisable.includes(entry.name)) {\n                console.log(`[MVU 更新方式切换] 禁用条目: ${entry.name}`);\n                return { ...entry, enabled: false };\n            }\n            return entry;\n        });\n        // 应用更新\n        await replaceWorldbook(updateMethodConfig.worldbookName, updatedWorldbook, { render: 'immediate' });\n        console.log('[MVU 更新方式切换] 世界书条目状态更新完成');\n        toastr.success(`已根据 MVU 更新方式 \"${updateMethod}\" 切换世界书条目`);\n    }\n    catch (error) {\n        console.log('[MVU 更新方式切换] 切换世界书条目时发生错误', error);\n        toastr.error('切换世界书条目失败');\n    }\n}\n/**\n * 监听 MVU 设置变化\n * 使用 0.5秒 固定间隔轮询\n */\nfunction watchMvuSettingsChange() {\n    let lastUpdateMethod = getMvuUpdateMethod();\n    // 每 0.5秒 检查一次设置变化\n    setInterval(async () => {\n        const currentUpdateMethod = getMvuUpdateMethod();\n        if (currentUpdateMethod && currentUpdateMethod !== lastUpdateMethod) {\n            console.log(`[MVU 更新方式切换] 检测到 MVU 更新方式变化: ${lastUpdateMethod} -> ${currentUpdateMethod}`);\n            lastUpdateMethod = currentUpdateMethod;\n            // 切换世界书条目\n            await switchWorldbookEntriesByUpdateMethod();\n        }\n    }, 500);\n    console.log('[MVU 更新方式切换] 已启动轮询监听');\n}\n// ==================== 主入口点 ====================\n/**\n * 脚本主入口\n */\n$(() => {\n    console.log('[MVU 更新方式切换] MVU 更新方式切换脚本启动中...');\n    // 初始化时执行一次切换\n    switchWorldbookEntriesByUpdateMethod()\n        .then(() => {\n        console.log('[MVU 更新方式切换] 初始化世界书条目切换完成');\n        // 启动监听\n        watchMvuSettingsChange();\n        console.log('[MVU 更新方式切换] 已开始监听 MVU 设置变化');\n    })\n        .catch(error => {\n        console.log('[MVU 更新方式切换] 初始化失败', error);\n        toastr.error('MVU 更新方式切换脚本启动失败');\n    });\n});\n// ==================== 卸载时清理 ====================\n/**\n * 页面卸载时的清理工作\n */\n$(window).on('pagehide', () => {\n    console.log('[MVU 更新方式切换] MVU 更新方式切换脚本已卸载');\n});\n"],"names":["z","UpdateMethodSchema","enum","UpdateMethodConfigSchema","object","worldbookName","string","extraModelParseEntries","array","aiOutputEntry","MvuSettingsSchema","optional","updateMethodConfig","parse","getMvuUpdateMethod","rawMvuSettings","_","get","SillyTavern","extensionSettings","parseResult","safeParse","success","data","console","log","prettifyError","error","async","switchWorldbookEntriesByUpdateMethod","updateMethod","worldbook","getWorldbook","length","toastr","warning","entriesToEnable","entriesToDisable","updatedWorldbook","map","entry","includes","name","enabled","replaceWorldbook","render","$","then","lastUpdateMethod","setInterval","currentUpdateMethod","watchMvuSettingsChange","catch","window","on"],"sourceRoot":""}